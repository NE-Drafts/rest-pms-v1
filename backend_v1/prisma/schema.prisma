// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  firstName   String
  lastName    String
  email       String    @unique
  phoneNumber String?
  password    String
  role        Role      @default(USER)
  resetToken  String?   @unique
  resetTokenExpiry DateTime?
  vehicles Vehicle[]
  reservations Reservation[]
  createdAt DateTime   @default(now())
}

enum Role {
  USER
  ADMIN
}

model Vehicle {
  id        String    @id @default(uuid())
  userId    String
  plate     String
  model     String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations Reservation[]
}

model ParkingSlot {
  id       String    @id @default(uuid())
  slotCode String    @unique
  reservations Reservation[]
}

model Reservation {
  id            String    @id @default(uuid())
  userId        String
  vehicleId     String
  parkingSlotId String?
  date          DateTime
  status        ReservationStatus @default(PENDING)
  approvedAt    DateTime?
  createdAt     DateTime  @default(now())

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicle       Vehicle   @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  parkingSlot   ParkingSlot? @relation(fields: [parkingSlotId], references: [id], onDelete: SetNull)
}

enum ReservationStatus {
  PENDING
  APPROVED
  REJECTED
}